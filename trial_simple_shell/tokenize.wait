#include "shell.h"
/**
 * **_strtok1 - tokenizes a string
 * @string: input string
 * @delim: delimeter
 * Return: pointer to an array of strings, or NULL on failure
 */
char **_strtok1(char *string, char delim)
{
	int i, j, k, m, wordcount = 0;
	char **s;

	if (string == NULL || string[0] == '\0')
		return (NULL);
	for (i = 0; string[i] != '\0'; i++)
		if ((string[i] != delim && string[i + 1] == delim) ||
		    (string[i] != delim && !string[i + 1]) || string[i + 1] == delim)
			wordcount++;
		
	if (wordcount == 0)
		return (NULL);
	s = malloc((1 + wordcount) * sizeof(char *));
	if (s == NULL)
		return (NULL);
	for (i = 0, j = 0; j < wordcount; j++)
	{
		while (string[i] == delim)
			i++;
		k = 0;
		while (string[i + k] != delim && string[i + k] != '\0')
			k++;
		s[j] = malloc((k + 1) * sizeof(char));
		if (!s[j])
		{
			for (k = 0; k < j; k++)
				free(s[k]);
			free(s);
			return (NULL);
		}
		for (m = 0; m < k; m++)
			s[j][m] = string[i++];
		s[j][m] = '\0';
	}
	s[j] = NULL;
	return (s);
}

int main()
{
    char *st = "My::name:is:mercy";
    char d = ':';
    char **s = _strtok1(st, d);

    if (s != NULL) {
        int i = 0;
        while (s[i] != NULL) {
            printf("Token %d: %s\n", i + 1, s[i]);
            i++;
        }

        // Free memory allocated for the tokens
        for (i = 0; s[i] != NULL; i++) {
            free(s[i]);
        }
        free(s);
    } else {
        printf("Tokenization failed.\n");
    }

    return 0;
}
